//変数とは
//文字列や数値などのデータに名前をつけることで、
//繰り返し利用できるようにする機能です。
//var 変数宣言のキーワード　関数
//let　初期値を指定しない変数も定義できる。
//const　再代入できない低数値などを定義できる。

//基本の書き方　
//let hello = "hello world"
//変数の基本的な書き方は以下のようになる。letの部分にはvarまたはconstが入ることもある。
//let 変数名＝ 値;
//変数には、任意の文字列以外にも、以下のものを代入できます。
//数値
//真偽
//null
//配列
//関数

//データの種類
//変数を扱う場合、データの種類によって処理が変わることがあります。
//この分類方法をデータ型といいます。　

//プリミティブ型とは..
//文字列や数値菜緒の値そのものを管理する可変のデータ型です。

//参照型（オブジェクトとは...
//値そのものではなく、複数の変数のあつまりを可変するデータ型です。

//分類　　データ型　　　　　概要
//文字列型（string)        ("hello word")など
//数値型  （number)        (11.1000)
//真偽型　（boolean)       (true　またはfalse)
//null    （値がない）    
//undefined (未定義) 

//参照型
//配列(array)            （データの入れ物（順番)
//（object)              （データの入れ物（名前付き） 
//関数（function)         (処理の入れ物)
//変数-参照型//
//配列は複数の値をまとめて管理するデータ構造のことです。
//配列の作成は、活弧を使用する、リテラル気法と、new演算子を使用する二つ

let num = 0;
for (let i = 1; i <=50; i++ ){
    if (i % 10 === 0){
        console.log("今"+ i +"回ループしました。");
    } 

    if(i % 4 === 0 ){
        console.log('4で割れる数です。' + i);
    }
}
//for分を抜けた後にアラート
alert("50回カウントが終わりました");

//10 / 5 === 2
//10 / 3 === 3.33333333
//10 % 5 === 0
//10 % 3 === 1
//10 % 4 === 2
//i  % 5 === 0

//4で割れる数の場合は4で割れる数です。カウントと出力する。
//50までカウントをする。
//10カウント毎に「今 [カウント] 回ループしました。」とコンソールに出力する。
//💡 例）カウントが10の場合：今10回ループしました。
//4で割れる数の場合は「4で割れる数です。[カウント]」とコンソールに出力する。
//カウントが50になったらアラートで「50回カウントが終わりました。」と出力する。
//📌 提出形式はhtmlファイルのscriptタグ内で実装する方法と、jsファイルで実装する方法とどちらでも良しとします。
//ヒント
//条件分岐を使用します。
//繰り返し文を使用します。
//四則演算を使用します。
//文字列演算子を使用します。
//リテラル
//const arry = [1,2,3,4,];

//newで作成する
//const array2 =new array(1,2,3,4,);

//サイズが３の配列ができる
//const arry1= new array(3);

//1,2が入った配列ができる
////const array2 = new arry(1,2);
//上記のように「arra1」の因数が１つの場合、はいれるのサイズを指定したことになります。/
//下側のように「atty2」の因数を２つ指定した場合は、指定した値自体が要素となり、
// その要素を持つ配列が生成されます。
// また、要素をまったくもたない空の配列も作成できます。

//要素も持たない空の配列
// 要素を持たない空の配列(箱のイメージ)
//const array3 = [];
////const array4 = new Array();

//配列の中の要素へアクセスする方法は、変数の場合とは少し違います。
//要素にアクセスするには、 インデックス（配列の要素番号） を指定します。
//const array = [1, 2, 3];
//console.log(array[0]); // 1
//console.log(array[1]); // 2
//console.log(array[2]); // 3

//インデックスは、0から始まります。
//ですので、配列の一番最初の要素は0番目になります。
//ちなみに3、存在しないインデックスにアクセスすると undefined になります。
//const array = [1, 2, 3];
//console.log(array[3]); //  <b>undefined <b>